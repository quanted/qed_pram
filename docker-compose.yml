version: '2.1'
volumes:
  collected_static: {}
services:

  # QED Django front-end
  qed_django:
    # build:
    #  context: .
    #  dockerfile: Dockerfile
    #  args:
    #    version: ${VERSION:-latest}  # passing VERSION env var to Dockerfile as ARG, default = latest
    image: quanted/qed:${VERSION:-latest}  # use qed image w/ tag = VERSION, default = latest
    expose:
      - "8080"
    volumes:
      - collected_static:/src/collected_static
      - .:/src  # map qed/ to container's /src for updating w/out rebuilding images
    environment:
      - REDIS_HOSTNAME=redis
      #these echo in the environmental variable to the running docker container
      #so that is can be picked up by the django settings 
      - DOCKER_HOSTNAME=${HOSTNAME}
      #- DOCKER_SECRET_KEY=${SECRET_KEY}
    links:
      - redis

  # Redis (message broker)
  redis:
    image: redis:latest
    hostname: redis
    expose:
      - "6379"

  # ubertool_cts nodejs submodule
  cts_nodejs:
    build: ./cts_nodejs
    image: cts-nodejs
    expose:
      - "4000"
    environment:
      - NODEJS_HOST=cts_nodejs
      - NODEJS_PORT=4000
      - REDIS_HOSTNAME=redis
      - REDIS_PORT=6379
    links:
      - redis
      - worker_chemaxon
      - worker_epi
      - worker_test
      - worker_sparc
      - worker_measured
      - worker_metabolizer

  # # Celery worker - ChemAxon calc
  worker_chemaxon:
    build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q chemaxon -l info -n chemaxon_worker -c 1
    links:
      - redis
      - qed_django
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # env_file:
    #   - ./${QED_CONFIG}

  # # Celery worker - EPI Suite calc
  worker_epi:
    build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q epi -l info -n epi_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # env_file:
    #   - ./${QED_CONFIG}


  # # Celery worker - TEST calc
  worker_test:
    build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q test -l info -n test_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # env_file:
    #   - ./${QED_CONFIG}

  # # Celery worker - SPARC calc
  worker_sparc:
    build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q sparc -l info -n sparc_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # env_file:
    #   - ./${QED_CONFIG}

  # # Celery worker - Measured (EPI) calc
  worker_measured:
    build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q measured -l info -n measured_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # env_file:
    #   - ./${QED_CONFIG}

  # # Celery worker - Metabolizer calc
  worker_metabolizer:
    build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q metabolizer -l info -n metabolizer_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # env_file:
    #   - ./${QED_CONFIG}

  # # Celery worker - cheminfo calc
  worker_cheminfo:
    build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q cheminfo -l info -n cheminfo_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # env_file:
    #   - ./${QED_CONFIG}

  # # Celery worker - manager calc
  worker_manager:
    build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q manager -l info -n manager_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # env_file:
    #   - ./${QED_CONFIG}

  qed_nginx:
    restart: always
    # build: ../cts_nginx
    build: ./qed_nginx
    ports:
      - "80:80"
      - "443:443"
    links:
      - qed_django:uwsgi_django  # Nginx.conf can reference "qed_django" service with the hostname 'uwsgi' or 'qed_django'
      - cts_nodejs:cts_nodejs
      - qed_flask:uwsgi_flask
#      - qed_flower:uwsgi_flower
    volumes:
      - /var/www/nginx/certs:/etc/nginx/qed # this points to the keys directory
    volumes_from:
      - qed_django:ro  # Mount all volumes from "qed_django" to NGINX, so it can access the collected static files

  # flask_qed Flask back-end
  qed_flask:
    build: ./flask_qed
    expose:
      - "7777"
    links:
      - redis
      - mongodb
      - qed_celery
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    volumes:
      - /var/www/sampreprocessed:/src/pram_flask/ubertool/ubertool/sam/bin/Preprocessed
      - /var/www/samresults:/src/pram_flask/ubertool/ubertool/sam/bin/Results
      - /var/www/qed-basins:/src/hms_flask/data/qed-basins
    depends_on:
      - mongodb
    logging:
      options:
        max-size: "200k"
        max-file: "10"

  # mongoDB database container
  mongodb:
    image: mongo:latest
    volumes:
      - /var/www/mongodb:/data/db
    expose:
      - "27017"

  # Celery container for async task execution
  qed_celery:
    build: ./flask_qed
    volumes:
      - /var/www/sampreprocessed:/src/pram_flask/ubertool/ubertool/sam/bin/Preprocessed
      - /var/www/samresults:/src/pram_flask/ubertool/ubertool/sam/bin/Results
      - /var/www/qed-basins:/src/hms_flask/data/qed-basins
    links:
      - redis
      - mongodb
    command: celery worker -A celery_cgi -Q qed --loglevel=INFO -c 2 -n qed_worker
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    logging:
      options:
        max-size: "200k"
        max-file: "10"

  # Flower container for monitoring celery tasks
#  qed_flower:
#    build: ./flask_qed
#    ports:
#      - "5555:5555"
#    entrypoint: flower
#    command: -A celery_cgi --url_prefix=flower --port=5555 --broker=redis://redis:6379/0
#    depends_on:
#      - redis
